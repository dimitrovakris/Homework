{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:15: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
      "  from ipykernel import kernelapp as app\n",
      "C:\\Users\\Admin\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:15: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
      "  from ipykernel import kernelapp as app\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "179.99999879258172 =UGOL\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "#inputs\n",
    "x = np.array([1,1])\n",
    "y = np.array([2,0])\n",
    "z = np.array([0,2])\n",
    "ppoint = x + 2*y+3*z\n",
    "\n",
    "M = np.array([x,y,z])\n",
    "rows,cols = M.T.shape\n",
    "maxes = 3.7*np.amax(abs(M),axis=0)\n",
    "colors = ['b','r','k']\n",
    "for i,l in enumerate(range(0,cols)):\n",
    "    #vectora\n",
    "    plt.axes().arrow(0,0,M[i,0],M[i,1],head_width=0.05,head_length=0.3,color=colors[i])    \n",
    "   #tochka\n",
    "    plt.plot(ppoint[0],ppoint[1],'o',color='black')\n",
    "   \n",
    "\n",
    "plt.plot(0,0,'ok')\n",
    "plt.axis('equal')\n",
    "plt.xlim([-1,maxes[0]])\n",
    "plt.ylim([-1,maxes[1]])\n",
    "plt.grid(b=True,which ='major')\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "x = np.array([1,1])\n",
    "y = np.array([2,0])\n",
    "z = np.array([0,2])\n",
    "xy = x-y\n",
    "xz = x-z\n",
    "cosine_angle= np.dot(xy,xz)/(np.linalg.norm(xy)*np.linalg.norm(xz))\n",
    "angle=np.arccos(cosine_angle)\n",
    "print(\"\")\n",
    "print(\"\")\n",
    "print(np.degrees(angle),'=UGOL')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 2\n",
    "Найдите собственные значения и собственные вектора матриц (необходимо решение на numpy и решение по алгоритму на бумажке). Для матрицы 3x3 можно посмотреть на корни характеристического многочлена, посчитанные в numpy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1., 4.]),\n",
       " matrix([[-0.89442719, -0.70710678],\n",
       "         [ 0.4472136 , -0.70710678]]))"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Задание 2\n",
    "\n",
    "import numpy as np\n",
    "import numpy.linalg as linalg\n",
    "\n",
    "m1 = np.array([[2, 2],\n",
    "               [1, 3]])\n",
    "np.linalg.eig(np.matrix('2 2; 1 3'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([6., 3., 3.]),\n",
       " matrix([[-0.57735027, -0.81649658,  0.15430335],\n",
       "         [-0.57735027,  0.40824829,  0.6172134 ],\n",
       "         [ 0.57735027, -0.40824829,  0.77151675]]))"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import numpy.linalg as linalg\n",
    "\n",
    "m2 = np.array([[4, 1, -1],\n",
    "               [1, 4, -1],\n",
    "               [-1, -1, 4]])\n",
    "np.linalg.eig(np.matrix('4 1 -1; 1 4 -1; -1 -1 4'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 3\n",
    "Найдите сингулярное разложение матрицы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание 3\n",
    "\n",
    "import numpy as np\n",
    "m3 = np.array([[1, 2],\n",
    "               [2, 3]])\n",
    "U, s, w = np.linalg.svd(m3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.52573111, -0.85065081],\n",
       "       [-0.85065081,  0.52573111]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "U"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.23606798, 0.23606798])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.52573111, -0.85065081],\n",
       "       [ 0.85065081, -0.52573111]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.52573111,  0.85065081],\n",
       "       [-0.85065081, -0.52573111]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "V= w.T\n",
    "V"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0.],\n",
       "       [0., 0.]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = np.zeros_like(m3, dtype=float)\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.23606798, 0.        ],\n",
       "       [0.        , 0.23606798]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d[np.diag_indices(min(m3.shape))]=s\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 2.],\n",
       "       [2., 3.]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.dot(np.dot(U,d),V.T)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
